scalar JSON
scalar DateTime
scalar Mixed

type Mutation {
    authenticate(code: String!): String
    createRegistration(clientId: ID!, email: String!): Registration
    verifyRegistration(id: ID!): Session
    confirmRegistration(token: ID!): ConfirmRegistrationPayload!
    updateUser(id: ID!, input: UpdateUserInput!): User
}

type ConfirmRegistrationPayload {
    application: Application
    email: String
    status: RegistrationConfirmationStatus!
}

enum RegistrationConfirmationStatus {
    TOKEN_NOT_FOUND
    LOGIN_EXPIRED
    ALREADY_VERIFIED
    VERIFIED
} 

type Query {
    viewer: Viewer!
}

type Viewer {
    authorizations: [Authorization!]!
    applications: [Application!]!
    application(id: ID!): Application
    client(id: ID!): Client
    session(id: ID!): Session
    user(id: ID!): User
    me: User
}

type Authorization {
    application: Application!
    applicationId: ID!
    userId: ID!
    createdAt: DateTime
}

type Session {
    id: ID!
    user: User!
}

type Registration {
    id: ID!
    securityCode: String!
}

type User {
    id: ID!
    email: String!
    displayName: String
    firstName: String
    lastName: String
}

type Application {
    id: ID!
    name: String!
    privacyPolicyUrl: String
    termsOfServiceUrl: String
    supportEmail: String
    brandImageUrl: String
    clientId: String
    createdAt: DateTime
}

type Client {
    id: ID!
    name: String!
    privacyPolicyUrl: String
    termsOfServiceUrl: String
    supportEmail: String
    brandImageUrl: String
}

input UpdateUserInput {
    firstName: String
    lastName: String
}